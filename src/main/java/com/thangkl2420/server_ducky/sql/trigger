
CREATE OR REPLACE FUNCTION update_user_counts()
RETURNS TRIGGER AS $$
BEGIN
    -- Tăng countFollower và countWatching lên 1 khi có INSERT vào bảng following
    IF TG_OP = 'INSERT' THEN
        UPDATE _user
        SET count_watching = count_watching + 1
        WHERE id = NEW.follower_id;

        UPDATE _user
        SET count_follower = count_follower + 1
        WHERE id = NEW.user_id;

    -- Giảm countFollower và countWatching đi 1 khi có DELETE từ bảng following
    ELSIF TG_OP = 'DELETE' THEN
        UPDATE _user
        SET count_watching = count_watching - 1
        WHERE id = OLD.follower_id;

        UPDATE _user
        SET count_follower = count_follower - 1
        WHERE id = OLD.user_id;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER update_user_counts_trigger
AFTER INSERT OR DELETE ON following
FOR EACH ROW
EXECUTE FUNCTION update_user_counts();


--Like
CREATE OR REPLACE FUNCTION update_post_count_like()
RETURNS TRIGGER AS $$
BEGIN
    -- Tăng countLike của post lên 1 khi có INSERT vào bảng post_like
    IF TG_OP = 'INSERT' THEN
        UPDATE post
        SET count_like = count_like + 1
        WHERE id = NEW.post_id;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER update_post_count_like_trigger
AFTER INSERT ON post_like
FOR EACH ROW
EXECUTE FUNCTION update_post_count_like();

--comment
CREATE OR REPLACE FUNCTION update_post_count_comment()
RETURNS TRIGGER AS $$
BEGIN
    -- Tăng countComment của post lên 1 khi có INSERT vào bảng post với isComment == 1
    IF TG_OP = 'INSERT' AND NEW.is_comment = 1 THEN
        UPDATE post
        SET count_comment = count_comment + 1
        WHERE id = NEW.parent_post_id;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER update_post_count_comment_trigger
AFTER INSERT ON post
FOR EACH ROW
EXECUTE FUNCTION update_post_count_comment();
